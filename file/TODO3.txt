
AI 回复：

这是三重引号字符串的一个重要特性：它会原样保留字符串中的所有字符，包括换行符、空格和特殊符号，无需使用反斜杠转义。例如：

kotlin

val text = """
    这是一段包含"引号"的文本，
    换行也会被保留，
    反斜杠\不会被转义。
""".trimIndent()

println(text)
特殊情况：如果需要在三重引号中使用反斜杠转义
如果确实需要在三重引号字符串中使用转义（例如插入 Unicode 字符），可以通过显式启用转义模式实现，即在字符串前添加 \ 标记：

kotlin

val text = """\
    这是转义模式：
    换行符\n会被转义，
    Unicode字符\u00A9（版权符号）会生效，
    反斜杠自身需要用\\表示。
""".trimIndent()

println(text)



如，以下两种写法都是合法的：

    紧跟字符（不换行）：


kotlin

val str1 = """直接紧跟的文本"""
println(str1) // 输出：直接紧跟的文本



    换行后写字符：


kotlin

val str2 = """
    换行后的文本
""".trimIndent() // trimIndent() 用于移除自动缩进
println(str2) // 输出：换行后的文本


注意点：

    如果不换行，字符串会从 """ 结束的位置开始，不会自动添加换行符。
    如果换行，字符串会包含换行符和后续的缩进（除非使用 trimIndent()、trimMargin() 等方法处理）。







